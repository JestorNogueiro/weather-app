{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","style","marginTop","fontSize","color","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","Date","Math","round","temp_min","temp_max","src","icon","alt","wind","speed","coord","lon","lat","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRA+IeA,EAvIC,WAAO,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEUF,mBAAS,IAFnB,mBAEbG,EAFa,KAEJC,EAFI,KAwDpB,OACE,mCACE,qBACEC,UACyB,oBAAhBF,EAAQG,MACXH,EAAQG,KAAKC,KAAO,GAClB,WAEF,MANR,SASE,qBAAKF,UAAU,YAAf,SACE,iCACE,qBAAKA,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOC,QACnCA,MAAOZ,EACPa,WAxEC,SAACC,GACE,UAAZA,EAAIC,KAENC,MAAM,qDAAD,OACkDhB,EADlD,yDAGFiB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WAiEc,oBAAhBlB,EAAQG,KACd,sBAAKD,UAAU,eAAf,UACE,cAAC,IAAD,CAAYmB,MAhCV,CACdC,UAAW,MACXC,SAAU,OACVC,MAAO,YA8BK,sBAAKtB,UAAU,WAAf,UACGF,EAAQyB,KADX,IACkBzB,EAAQ0B,IAAIC,WAG9B,qBAAKzB,UAAU,OAAf,SAnED,SAAC0B,GACZ,IAuBIC,EATO,CACT,SACA,SACA,UACA,YACA,UACA,SACA,YAEaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,WACA,WACA,YAaiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAuCCJ,CAAK,IAAIM,QAChC,sBAAKnC,UAAU,OAAf,UACA,8BAAIoC,KAAKC,MAAMvC,EAAQG,KAAKC,MACzB,OADH,QAGE,sBAAKF,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACE,cAAC,IAAD,IADF,WAGE,gCACGF,EAAQG,KAAKqC,SADhB,IAC2B,OAD3B,WAIF,sBAAKtC,UAAU,WAAf,UACE,cAAC,IAAD,IADF,WAGE,gCACGF,EAAQG,KAAKsC,SADhB,IAC2B,OAD3B,iBAMN,sBAAKvC,UAAU,UAAf,UACGF,EAAQA,QAAQ,GAAGG,KACpB,qBAAKD,UAAU,eAAf,SACE,qBACEwC,IAAG,2CAAsC1C,EAAQA,QAAQ,GAAG2C,KAAzD,WACHC,IAAI,UAIV,gDACgB5C,EAAQ6C,KAAKC,MAD7B,WAGA,sBAAK5C,UAAU,UAAf,UACE,sBAAKA,UAAU,MAAf,iBAA0BF,EAAQ+C,MAAMC,OACxC,sBAAK9C,UAAU,MAAf,iBAA0BF,EAAQ+C,MAAME,aAI5C,aCzHCC,MATf,WACE,OACE,qBAAKhD,UAAU,MAAf,SAEA,cAAC,EAAD,OCIWiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.aef42e7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./weather.css\";\r\nimport {\r\n  WiDaySunny,\r\n  WiThermometer,\r\n  WiThermometerExterior,\r\n} from \"react-icons/wi\";\r\n\r\nconst Weather = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const search = (evt) => {\r\n    if (evt.key === \"Enter\") {\r\n     // Fetching the data into the json\r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&APPID=c952342796f0cdae6ec4e2619fb1317f`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          setWeather(result);\r\n          setQuery(\"\");\r\n          console.log(result);\r\n        });\r\n    }\r\n  };\r\n\r\n  const date = (d) => {\r\n    let months = [\r\n      \"January\",\r\n      \"Fabruary\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"Octomber\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thusday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n    return `${day} ${date} ${month} ${year}`;\r\n  };\r\n  const myStyle = {\r\n    marginTop: \"3px\",\r\n    fontSize: \"2rem\",\r\n    color: \"orange\",\r\n  };\r\n \r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          typeof weather.main != \"undefined\"\r\n            ? weather.main.temp > 16\r\n              ? \"app warm\"\r\n              : \"app\"\r\n            : \"app\"\r\n        }\r\n      >\r\n        <div className=\"container\">\r\n          <main>\r\n            <div className=\"search-box\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"search-bar\"\r\n                placeholder=\"Search... Place or City \"\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                value={query}\r\n                onKeyPress={search}\r\n              />\r\n            </div>\r\n            {typeof weather.main != \"undefined\" ? (\r\n              <div className=\"location-box\">\r\n                <WiDaySunny style={myStyle} />\r\n                <div className=\"location\">\r\n                  {weather.name},{weather.sys.country}\r\n                </div>\r\n\r\n                <div className=\"date\">{date(new Date())}</div>\r\n                <div className=\"temp\">\r\n                <p>{Math.round(weather.main.temp)}\r\n                  {\"\\u00b0\"} C</p> \r\n                  {/* <WiThermometer style={tempStyle} /> */}\r\n                  <div className=\"min-max-temp\">\r\n                    <div className=\"min-temp\">\r\n                      <WiThermometerExterior />\r\n                      Min-Temp\r\n                      <div>\r\n                        {weather.main.temp_min} {\"\\u00b0\"} C\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"max-temp\">\r\n                      <WiThermometer />\r\n                      Max-Temp\r\n                      <div>\r\n                        {weather.main.temp_max} {\"\\u00b0\"} C\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"weather\">\r\n                  {weather.weather[0].main}\r\n                  <div className=\"weather-icon\">\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\r\n                      alt=''\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  Wind Speed : {weather.wind.speed} km/h\r\n                </div>\r\n                <div className=\"lat-lon\">\r\n                  <div className='lon'>Lon:{weather.coord.lon}</div>\r\n                  <div className='lat'>Lat:{weather.coord.lat}</div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","\nimport './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n    <Weather/>  \n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}